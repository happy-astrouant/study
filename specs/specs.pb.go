// Code generated by protoc-gen-go.
// source: specs.proto
// DO NOT EDIT!

/*
Package specs is a generated protocol buffer package.

It is generated from these files:
	specs.proto

It has these top-level messages:
	Empty
	LoginRequest
	LoginResponse
	UploadRequest
	DownloadRequest
	DownloadResponse
	SendKeyRequest
	Event
*/
package specs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event_Type int32

const (
	Event_KeySent Event_Type = 0
)

var Event_Type_name = map[int32]string{
	0: "KeySent",
}
var Event_Type_value = map[string]int32{
	"KeySent": 0,
}

func (x Event_Type) String() string {
	return proto.EnumName(Event_Type_name, int32(x))
}
func (Event_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LoginRequest struct {
	Public    string `protobuf:"bytes,1,opt,name=public" json:"public,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginRequest) GetPublic() string {
	if m != nil {
		return m.Public
	}
	return ""
}

func (m *LoginRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type LoginResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UploadRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UploadRequest) Reset()                    { *m = UploadRequest{} }
func (m *UploadRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()               {}
func (*UploadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UploadRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *UploadRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DownloadRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
}

func (m *DownloadRequest) Reset()                    { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()               {}
func (*DownloadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DownloadRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type DownloadResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DownloadResponse) Reset()                    { *m = DownloadResponse{} }
func (m *DownloadResponse) String() string            { return proto.CompactTextString(m) }
func (*DownloadResponse) ProtoMessage()               {}
func (*DownloadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DownloadResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SendKeyRequest struct {
	To  string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *SendKeyRequest) Reset()                    { *m = SendKeyRequest{} }
func (m *SendKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*SendKeyRequest) ProtoMessage()               {}
func (*SendKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SendKeyRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *SendKeyRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type Event struct {
	Type           Event_Type            `protobuf:"varint,1,opt,name=type,enum=specs.Event_Type" json:"type,omitempty"`
	KeySentDetails *Event_KeySentDetails `protobuf:"bytes,2,opt,name=keySentDetails" json:"keySentDetails,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Event) GetType() Event_Type {
	if m != nil {
		return m.Type
	}
	return Event_KeySent
}

func (m *Event) GetKeySentDetails() *Event_KeySentDetails {
	if m != nil {
		return m.KeySentDetails
	}
	return nil
}

type Event_KeySentDetails struct {
	From string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Key  []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *Event_KeySentDetails) Reset()                    { *m = Event_KeySentDetails{} }
func (m *Event_KeySentDetails) String() string            { return proto.CompactTextString(m) }
func (*Event_KeySentDetails) ProtoMessage()               {}
func (*Event_KeySentDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *Event_KeySentDetails) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Event_KeySentDetails) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "specs.Empty")
	proto.RegisterType((*LoginRequest)(nil), "specs.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "specs.LoginResponse")
	proto.RegisterType((*UploadRequest)(nil), "specs.UploadRequest")
	proto.RegisterType((*DownloadRequest)(nil), "specs.DownloadRequest")
	proto.RegisterType((*DownloadResponse)(nil), "specs.DownloadResponse")
	proto.RegisterType((*SendKeyRequest)(nil), "specs.SendKeyRequest")
	proto.RegisterType((*Event)(nil), "specs.Event")
	proto.RegisterType((*Event_KeySentDetails)(nil), "specs.Event.KeySentDetails")
	proto.RegisterEnum("specs.Event_Type", Event_Type_name, Event_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cloud service

type CloudClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*Empty, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	SendKey(ctx context.Context, in *SendKeyRequest, opts ...grpc.CallOption) (*Empty, error)
	Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Cloud_SubscribeClient, error)
}

type cloudClient struct {
	cc *grpc.ClientConn
}

func NewCloudClient(cc *grpc.ClientConn) CloudClient {
	return &cloudClient{cc}
}

func (c *cloudClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/specs.cloud/login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/specs.cloud/upload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := grpc.Invoke(ctx, "/specs.cloud/download", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) SendKey(ctx context.Context, in *SendKeyRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/specs.cloud/sendKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Cloud_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cloud_serviceDesc.Streams[0], c.cc, "/specs.cloud/subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cloud_SubscribeClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type cloudSubscribeClient struct {
	grpc.ClientStream
}

func (x *cloudSubscribeClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Cloud service

type CloudServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Upload(context.Context, *UploadRequest) (*Empty, error)
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	SendKey(context.Context, *SendKeyRequest) (*Empty, error)
	Subscribe(*Empty, Cloud_SubscribeServer) error
}

func RegisterCloudServer(s *grpc.Server, srv CloudServer) {
	s.RegisterService(&_Cloud_serviceDesc, srv)
}

func _Cloud_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specs.cloud/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specs.cloud/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specs.cloud/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_SendKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).SendKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specs.cloud/SendKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).SendKey(ctx, req.(*SendKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudServer).Subscribe(m, &cloudSubscribeServer{stream})
}

type Cloud_SubscribeServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type cloudSubscribeServer struct {
	grpc.ServerStream
}

func (x *cloudSubscribeServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Cloud_serviceDesc = grpc.ServiceDesc{
	ServiceName: "specs.cloud",
	HandlerType: (*CloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _Cloud_Login_Handler,
		},
		{
			MethodName: "upload",
			Handler:    _Cloud_Upload_Handler,
		},
		{
			MethodName: "download",
			Handler:    _Cloud_Download_Handler,
		},
		{
			MethodName: "sendKey",
			Handler:    _Cloud_SendKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscribe",
			Handler:       _Cloud_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "specs.proto",
}

func init() { proto.RegisterFile("specs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0xdd, 0xce, 0xd2, 0x40,
	0x10, 0xb5, 0x95, 0x82, 0x0c, 0x7c, 0x15, 0xe7, 0x43, 0x24, 0xd5, 0x0b, 0xd2, 0x04, 0xc5, 0xc4,
	0x34, 0xa6, 0x26, 0x26, 0xc6, 0x4b, 0xe1, 0x0a, 0xaf, 0x8a, 0x3e, 0x40, 0x7f, 0x46, 0xd2, 0x50,
	0x76, 0xd7, 0xee, 0x56, 0xd2, 0x4b, 0xdf, 0xcc, 0x47, 0x33, 0x5d, 0xb6, 0x81, 0xa2, 0xc9, 0x77,
	0x37, 0x3f, 0x67, 0xce, 0x9c, 0xce, 0xd9, 0xc2, 0x48, 0x0a, 0x4a, 0x65, 0x20, 0x4a, 0xae, 0x38,
	0x3a, 0x3a, 0xf1, 0x07, 0xe0, 0x6c, 0x8e, 0x42, 0xd5, 0xfe, 0x1a, 0xc6, 0x5f, 0xf9, 0x3e, 0x67,
	0x11, 0xfd, 0xac, 0x48, 0x2a, 0x9c, 0x41, 0x5f, 0x54, 0x49, 0x91, 0xa7, 0x73, 0x6b, 0x61, 0xad,
	0x86, 0x91, 0xc9, 0xf0, 0x15, 0x0c, 0x65, 0xbe, 0x67, 0xb1, 0xaa, 0x4a, 0x9a, 0xdb, 0x0b, 0x6b,
	0x35, 0x8e, 0x2e, 0x05, 0x7f, 0x09, 0x77, 0x86, 0x45, 0x0a, 0xce, 0x24, 0xe1, 0x14, 0x1c, 0xc5,
	0x0f, 0xc4, 0x0c, 0xcb, 0x39, 0xf1, 0x3f, 0xc1, 0xdd, 0x77, 0x51, 0xf0, 0x38, 0x6b, 0xb7, 0x4d,
	0xc1, 0xe1, 0x27, 0x46, 0x65, 0x0b, 0xd3, 0x09, 0x22, 0xf4, 0xb2, 0x58, 0xc5, 0x66, 0x8d, 0x8e,
	0xfd, 0x37, 0xf0, 0x74, 0xcd, 0x4f, 0xec, 0xc1, 0x61, 0xff, 0x35, 0x4c, 0x2e, 0x40, 0xa3, 0xa6,
	0x25, 0xb4, 0xae, 0x08, 0x43, 0x70, 0x77, 0xc4, 0xb2, 0x2d, 0xd5, 0x2d, 0x9f, 0x0b, 0xb6, 0xe2,
	0x86, 0xcc, 0x56, 0x1c, 0x27, 0xf0, 0xf8, 0x40, 0xb5, 0x51, 0xd1, 0x84, 0xfe, 0x1f, 0x0b, 0x9c,
	0xcd, 0x2f, 0x62, 0x0a, 0x97, 0xd0, 0x53, 0xb5, 0x20, 0x8d, 0x76, 0xc3, 0x67, 0xc1, 0xf9, 0xc4,
	0xba, 0x17, 0x7c, 0xab, 0x05, 0x45, 0xba, 0x8d, 0x5f, 0xc0, 0x3d, 0x50, 0xbd, 0x23, 0xa6, 0xd6,
	0xa4, 0xe2, 0xbc, 0x90, 0x9a, 0x6d, 0x14, 0xbe, 0xec, 0x0c, 0x6c, 0x3b, 0x90, 0xe8, 0x66, 0xc4,
	0xfb, 0x08, 0x6e, 0x17, 0xd1, 0x7c, 0xcf, 0x8f, 0x92, 0x1f, 0x8d, 0x56, 0x1d, 0xff, 0x47, 0xed,
	0x3d, 0xf4, 0x1a, 0x29, 0x38, 0x82, 0x81, 0x99, 0x9f, 0x3c, 0x0a, 0x7f, 0xdb, 0xe0, 0xa4, 0x05,
	0xaf, 0x32, 0x0c, 0xc1, 0x29, 0x1a, 0xcf, 0xf0, 0xde, 0x88, 0xb9, 0x7e, 0x07, 0xde, 0xb4, 0x5b,
	0x34, 0x87, 0x7c, 0x07, 0xfd, 0x4a, 0x1b, 0x88, 0x6d, 0xbf, 0xe3, 0xa7, 0x37, 0x6e, 0xbf, 0xab,
	0x79, 0x5b, 0xf8, 0x19, 0x9e, 0x64, 0xc6, 0x0a, 0x9c, 0x99, 0xce, 0x8d, 0x89, 0xde, 0x8b, 0x7f,
	0xea, 0x66, 0x55, 0x00, 0x03, 0x79, 0xf6, 0x07, 0x9f, 0x1b, 0x4c, 0xd7, 0xaf, 0x9b, 0x65, 0x6f,
	0x61, 0x28, 0xab, 0x44, 0xa6, 0x65, 0x9e, 0x10, 0x76, 0x5a, 0x17, 0x60, 0x73, 0xed, 0xf7, 0x56,
	0xd2, 0xd7, 0xbf, 0xc2, 0x87, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x15, 0xfa, 0x93, 0xdd, 0x19,
	0x03, 0x00, 0x00,
}
